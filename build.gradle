buildscript {
  ext {
    springBootVersion = "2.1.4.RELEASE"
    gradleDockerComposeVersion = "0.9.3"
    mapstructVersion = "1.3.0.Final"
    nodeAppVersion = "10.15.3"
    npmAppVersion = "6.4.1"
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
  id "net.ltgt.apt-idea" version "0.21"
  id "net.ltgt.apt" version "0.21"
  id "com.moowork.node" version "1.2.0"
}

apply plugin: "com.moowork.node"
apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

idea {
  module {
    excludeDirs += files("node_modules")
  }
}

group = "com.reiterweg.phonebook"
version = "1.0.0"
sourceCompatibility = 1.8

project.buildDir = "build"

defaultTasks "ngClean", "clean", "ngBuild", "build", "dockerComposeUp"

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

  runtime("org.postgresql:postgresql")

  implementation("org.springframework.boot:spring-boot-starter")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.mapstruct:mapstruct:${mapstructVersion}")

  testImplementation("org.springframework.boot:spring-boot-starter-test")
}

node {
  version = "${nodeAppVersion}"
  npmVersion = "${npmAppVersion}"
  download = true
}

task ngClean(type: Exec) {
  dependsOn "npmInstall"
  if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
    commandLine "npm.cmd", "run", "clean"
  } else {
    commandLine "npm", "run", "clean"
  }
}

task ngBuild(type: Exec) {
  dependsOn "npmInstall"
  if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
    commandLine "npm.cmd", "run", "build:prod"
  } else {
    commandLine "npm", "run", "build:prod"
  }
}

task dockerComposeUp(type: Exec) {
  dependsOn "build"
  if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
    commandLine "docker-compose.cmd", "up"
  } else {
    commandLine "docker-compose", "up"
  }
}

processResources {
  dependsOn "ngBuild"
}

clean {
  dependsOn "ngClean"
}
